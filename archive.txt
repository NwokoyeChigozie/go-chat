
// package main

// import (
// 	"fmt"
// 	"io"
// 	"log"
// 	"net/http"
// 	"os"
// 	"path"

// 	"github.com/gorilla/mux"
// 	"github.com/gorilla/websocket"
// )

// var upgrader = websocket.Upgrader{
// 	ReadBufferSize:  1024,
// 	WriteBufferSize: 1024,
// 	CheckOrigin:     func(request *http.Request) bool { return true },
// }

// func Homepage(response http.ResponseWriter, request *http.Request) {
// 	fmt.Fprintf(response, "Home Page")
// }
// func sevechat(response http.ResponseWriter, request *http.Request) {
// 	p := path.Dir("./views/chat/index.html")
// 	// set header
// 	response.Header().Set("Content-type", "text/html")
// 	http.ServeFile(response, request, p)
// }

// func wsEndpoint(response http.ResponseWriter, request *http.Request) {

// 	ws, err := upgrader.Upgrade(response, request, nil)
// 	if err != nil {
// 		log.Println(err)
// 	}
// 	log.Println("Successfully Connected...")
// 	go Writer(ws)
// 	reader(ws)
// }

// func reader(conn *websocket.Conn) {
// 	for {
// 		messageType, p, err := conn.ReadMessage()
// 		if err != nil {
// 			log.Println(err)
// 		}

// 		log.Println(string(p))
// 		if err := conn.WriteMessage(messageType, p); err != nil {
// 			log.Println(err)
// 			return
// 		}
// 	}
// }

// func Writer(conn *websocket.Conn) {
// 	for {
// 		fmt.Println("Sending")
// 		messageType, r, err := conn.NextReader()
// 		if err != nil {
// 			fmt.Println(err)
// 			return
// 		}
// 		w, err := conn.NextWriter(messageType)
// 		if err != nil {
// 			fmt.Println(err)
// 			return
// 		}
// 		if _, err := io.Copy(w, r); err != nil {
// 			fmt.Println(err)
// 			return
// 		}
// 		if err := w.Close(); err != nil {
// 			fmt.Println(err)
// 			return
// 		}
// 	}
// }

// func main() {
// 	App := mux.NewRouter()
// 	//err := godotenv.Load(".env")

// 	//if err != nil {
// 	//	log.Fatalf("Error loading .env file")
// 	//}
// 	port := os.Getenv("PORT")
// 	if port == "" {
// 		port = "8080" // Default port if not specified
// 	}
// 	fmt.Println("Starting Server at", ":"+port)
// 	defer http.ListenAndServe(":"+port, App)
// 	fmt.Println("Server Started")

// 	App.HandleFunc("/home", Homepage).Methods("GET")
// 	App.HandleFunc("/chat", wsEndpoint).Methods("GET")
// 	App.HandleFunc("/", sevechat).Methods("GET")
// }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"fmt"
	"net/http"
	"os"
	"path"

	socketio "github.com/googollee/go-socket.io"
	"github.com/gorilla/mux"
)

func Homepage(response http.ResponseWriter, request *http.Request) {
	fmt.Fprintf(response, "Home Page")
}
func sevechat(response http.ResponseWriter, request *http.Request) {
	p := path.Dir("./views/chat/index.html")
	// set header
	response.Header().Set("Content-type", "text/html")
	http.ServeFile(response, request, p)
}

func wsEndpoint(response http.ResponseWriter, request *http.Request) {
}

func main() {
	App := mux.NewRouter()
	socketServer, err := socketio.NewServer(nil)
	if err != nil {
		fmt.Println(err)
	}

	socketServer.On("connection", func(so socketio.Socket) {
		fmt.Println("On connection")
		so.Join("room1")
		so.On("chat message", func(msg string) {
			fmt.Println("Emit: ", so.Emit("chat message", msg))
			so.BroadcastTo("room1", "chat message", msg)
		})
		so.On("disconnection", func() {
			fmt.Println("On Disconnection")
		})
	})

	socketServer.On("error", func(so socketio.Socket, err error) {
		fmt.Println("Error: ", err)
	})
	//err := godotenv.Load(".env")

	//if err != nil {
	//	log.Fatalf("Error loading .env file")
	//}
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Default port if not specified
	}
	fmt.Println("Starting Server at", ":"+port)
	defer http.ListenAndServe(":"+port, App)
	fmt.Println("Server Started")

	App.HandleFunc("/home", Homepage).Methods("GET")
	App.HandleFunc("/socket.io/", socketServer)
	App.HandleFunc("/", sevechat).Methods("GET")
}
